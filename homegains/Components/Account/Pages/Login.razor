@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using homegains.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4 align-items-center align-self-center">
            <div class="mt-5">
                <div class="form-control shadow p -3" style="border-radius:15px; border:none;">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <div class="mt-3">
                            <div class="d-flex justify-content-center align-items-center align-self-center">
                                <img src="assets/websitelogo/mylogo.svg" class="img-fluid" style="width:100px;" alt="Alternate Text" />
                            </div>
                            <div class="text-center">
                                <h5 class="p-0 m-0"><span class="text-danger">Home</span>Gains</h5>
                            </div>
                            <div class="mt-3 text-center">
                                <h2 class="p-0 m-0">Sign in to Account</h2>
                                <div class="d-flex justify-content-center">
                                    <div class="">
                                        <p class="p-0 m-0 form-text">or <a href="Account/Register" class="text-decoration-none">Click here to register now</a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="px-3">
                            <div class="mt-3">
                                <label class="p-0 m-0">Email Address</label>
                                <InputText @bind-Value="Input.Email" class="form-control mt-1" style="border-radius:8px;" type="text" placeholder="name@example.com" autocomplete="on" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="mt-2">
                                <label class="p-0 m-0">Password</label>
                                <InputText @bind-Value="Input.Password" class="form-control mt-1" style="border-radius:8px;" type="password" placeholder="Password" autocomplete="on" />
                                <ValidationMessage For="() => Input.Password" class="text-danger" /> 
                            </div>
                        </div>
                        <div class="px-3 mt-2">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Remember me
                            </label>
                            <div class="mt-2">
                                <a href="Account/ForgotPassword" class="text-decoration-none">Forgot Password?</a>
                            </div>
                        </div>
                        <div class="mt-2 px-3">
                            <button class="btn form-control btn-primary py-2" style="border-radius:8px;" type="submit">Sign in</button>
                        </div>
                        <div class="mt-4 mb-3 text-center px-3">
                            <p class="p-0 m-0 form-text">&copy 2023 All rights reserved</p>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-md-4"></div>
    </div>
</div>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
