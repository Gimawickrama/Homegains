@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Globalization
@using homegains.Data

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="container-fluid mb-3">
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <div class="form-control shadow p-3" style="border-radius:15px; border:none;">
                    <div class="mt-3 px-3">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <h2 class="p-0 m-0">Register an Account</h2>
                                    <p class="p-0 m-0 form-text">Register first to login the web site.</p>
                                    <h4 class="p-0 m-0 form-text"> <a href="Account/Login" class="text-decoration-none">Already Member</a></h4>
                                </div>
                            </div>
                            <div class="col-md-6 d-flex justify-content-sm-end">
                                <div>
                                    <div class="d-flex justify-content-center align-items-center align-self-center">
                                        <img src="assets/websitelogo/mylogo.svg" class="img-fluid" style="width:100px;" alt="Alternate Text" />
                                    </div>
                                    <div class="text-center">
                                        <h5 class="p-0 m-0"><span class="text-danger">Home</span>Gains</h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                    <div class="px-3">
                        <div class="mt-3">
                            <label class="p-0 m-0">Full Name</label>
                            <InputText @bind-Value="Input.FullName" class="form-control mt-1" style="border-radius:8px;" placeholder="Full Name" autocomplete="on" />
                            <ValidationMessage For="() => Input.FullName" class="text-danger" />
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Email Address</label>
                                    <InputText @bind-Value="Input.Email" class="form-control mt-1" style="border-radius:8px;" placeholder="Email Address" autocomplete="on" />
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Gender</label>
                                    <InputSelect class="form-control form-select mt-1" style="border-radius:8px;" @bind-Value="Input.Gender">
                                        @foreach (var gen in genderSelect)
                                        {
                                            <option>@gen</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Contact Number</label>
                                    <InputText @bind-Value="Input.ContactNumber" class="form-control mt-1" style="border-radius:8px;" type="text" placeholder="Contact Number" autocomplete="on" />
                                    <ValidationMessage For="() => Input.ContactNumber" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Date Of Birth</label>
                                    <InputDate @bind-Value="Input.DateOfBirth" class="form-control mt-1" style="border-radius:8px;" />
                                    <ValidationMessage For="() => Input.DateOfBirth" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Password</label>
                                    <InputText @bind-Value="Input.Password" class="form-control mt-1" style="border-radius:8px;" type="password" placeholder="Password" autocomplete="on" />
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mt-3">
                                    <label class="p-0 m-0">Confirm Password</label>
                                    <InputText @bind-Value="Input.ConfirmPassword" class="form-control mt-1" style="border-radius:8px;" type="password" placeholder="Confirm Password" autocomplete="on" />
                                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                                </div>
                            </div>
                        </div>
                        
                    </div>
                    <div class="mt-3 px-3">
                        <button class="btn form-control btn-primary py-2" style="border-radius:8px;" type="submit">Register</button>
                    </div>
                    <div class="mt-4 mb-3 text-center px-3">
                        <p class="p-0 m-0 form-text">&copy; 2023 All rights reserved</p>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-md-2"></div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private string[] genderSelect = { "Male", "Female" };

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.FullName = Input.FullName;
        user.ContactNumber = Input.ContactNumber;
        user.Gender = Input.Gender;
        user.DateOfBirth = Input.DateOfBirth;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        //Create and assign the user to the role created
        var adminRole = await RoleManager.FindByNameAsync("Admin");
        if (adminRole is null)
        {
            await RoleManager.CreateAsync(new IdentityRole("Admin"));
            await UserManager.AddToRoleAsync(user, "Admin");
        }
        else
        {
            var userRole = await RoleManager.FindByIdAsync("User");
            if (userRole is null)
                await RoleManager.CreateAsync(new IdentityRole("User"));

            await UserManager.AddToRoleAsync(user, "User");
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Full Name")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Contact Number is required")]
        [Display(Name = "Contact Number")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Contact Number must be 10 digits")]
        public string ContactNumber { get; set; } = "";
    
        [Required]
        [Display(Name = "Date Of Birth")]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [Display(Name = "Gender")]
        public string Gender { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

    }
}
