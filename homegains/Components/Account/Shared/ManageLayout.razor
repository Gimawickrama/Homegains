@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using homegains.Data
@inherits LayoutComponentBase
@layout AccountLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<div>
    <div class="row mt-3 mb-3">
        <div class="col-md-9">
            <h4 class="p-0 m-0 text-end px-3">
            </h4>

            <div class="col-md-12 px-3">
                <h2 class="p-0 m-0 text-end">Manage your account</h2>
                <p class="form-text text-end">Change your account settings</p>
                <hr />
                <div class="row text-start">
                    <div class="col-md-3 mb-3">
                        <ManageNavMenu />
                    </div>
                    <div class="col-md-9">
                        @Body
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <h4 class="p-0 m-0">Authentication State</h4>
            <p class="form-text">Actknolodge for the System user.</p>
            <div class="form-control px-3" style="border-radius:10px; padding: 20px 0 20px 0; background:#F1FFF1;">
                <div class="d-flex justify-content-between">
                    <div style="width:30px;"></div>
                    <div><img width="150" src="assets/icons/security.svg" /></div>
                    <div style="width:30px;"></div>
                </div>
                <div class="text-center" style="color:green;">
                    <h1 class="p-0 m-0">You Are</h1>
                    <h3 class="p-0 m-0">Authenticated</h3>
                    <h1 style="font-size:50px;">Hello!</h1>
                    <h4 class="p-0 m-0">@roleName</h4>
                    <h5 class="p-0 m-0">@userEmail</h5>
                    <p class="form-text">Privacy is all be a protected with the company privacy statement.</p>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private bool isAdmin;
    private bool isUser;
    private bool isEmployee;
    private bool isClient;

    private string userEmail;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isUser = user.IsInRole("User");
        isEmployee = user.IsInRole("Employer");
        isClient = user.IsInRole("Client");

        var users = (await authenticationStateTask).User;
        userEmail = user.FindFirstValue(ClaimTypes.Email);

        getName();
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string roleName;

    private void getName()
    {
        if (isAdmin == true)
        {
            roleName = "Admin";
        }
        else if (isUser == true)
        {
            roleName = "User";
        }
        else if (isEmployee == true)
        {
            roleName = "Employer";
        }
        else if (isClient == true)
        {
            roleName = "Client";
        }
    }
}